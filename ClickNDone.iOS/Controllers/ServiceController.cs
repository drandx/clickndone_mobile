// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections.Generic;

namespace ClickNDone.iOS
{
	public partial class ServiceController : UIViewController
	{
		ActionSheetDatePicker actionSheetDatePicker;
		ActionSheetDatePicker actionSheetTimePicker;

		private readonly IList<string> fromMoney = new List<string>
		{
			"Blue",
			"Green",
			"Red",
			"Purple",
			"Yellow"
		};
		private readonly IList<string> toMoney = new List<string>
		{
			"Blue",
			"Green",
			"Red",
			"Purple",
			"Yellow"
		};

		private string selectedFromMoney;
		private string selectedToMoney;

		public ServiceController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			//Date Selector
			UITapGestureRecognizer labelTap = new UITapGestureRecognizer(() => {
				actionSheetDatePicker.Show ();
			});
			UITapGestureRecognizer labelDayTap = new UITapGestureRecognizer(() => {
				actionSheetDatePicker.Show ();
			});
			UITapGestureRecognizer labelYearTap = new UITapGestureRecognizer(() => {
				actionSheetDatePicker.Show ();
			});
			lblMonth.UserInteractionEnabled = true;
			lblMonth.AddGestureRecognizer(labelTap);

			lblDay.UserInteractionEnabled = true;
			lblDay.AddGestureRecognizer(labelDayTap);

			lblYear.UserInteractionEnabled = true;
			lblYear.AddGestureRecognizer(labelYearTap);

			actionSheetDatePicker = new ActionSheetDatePicker (this.View);
			actionSheetDatePicker.Title = "Seleccione la fecha:";
			actionSheetDatePicker.DatePicker.Mode = UIDatePickerMode.Date;
			actionSheetDatePicker.DatePicker.MinimumDate = DateTime.Today.AddDays (0);
			actionSheetDatePicker.DatePicker.MaximumDate = DateTime.Today.AddDays (120);			

			actionSheetDatePicker.DatePicker.ValueChanged += (s, e) => {
				NSDate selectedDate = (s as UIDatePicker).Date;
				var dateTime = DateTime.SpecifyKind(selectedDate, DateTimeKind.Unspecified);
				lblMonth.Text = dateTime.ToString("MMMM");
				lblDay.Text = dateTime.Day.ToString();
				lblYear.Text = dateTime.Year.ToString();
			};

			actionSheetDatePicker.DoneButton.TouchDown += (s, e) => {
				var dateTime = DateTime.SpecifyKind(actionSheetDatePicker.DatePicker.Date, DateTimeKind.Unspecified);
				lblMonth.Text = dateTime.ToString("MMMM");
				lblDay.Text = dateTime.Day.ToString();
				lblYear.Text = dateTime.Year.ToString();
			};

			//Time Selector
			UITapGestureRecognizer labelHourTap = new UITapGestureRecognizer(() => {
				actionSheetTimePicker.Show ();
			});
			UITapGestureRecognizer labelMinuteTap = new UITapGestureRecognizer(() => {
				actionSheetTimePicker.Show ();
			});
			UITapGestureRecognizer labelAMPMTap = new UITapGestureRecognizer(() => {
				actionSheetTimePicker.Show ();
			});

			lblHour.UserInteractionEnabled = true;
			lblHour.AddGestureRecognizer(labelHourTap);

			lblMinute.UserInteractionEnabled = true;
			lblMinute.AddGestureRecognizer(labelMinuteTap);

			lblAMPM.UserInteractionEnabled = true;
			lblAMPM.AddGestureRecognizer(labelAMPMTap);

			actionSheetTimePicker = new ActionSheetDatePicker (this.View);
			actionSheetTimePicker.Title = "Seleccione la hora:";
			actionSheetTimePicker.DatePicker.Mode = UIDatePickerMode.Time;

			actionSheetTimePicker.DatePicker.ValueChanged += (s, e) => {
				NSDate selectedDate = (s as UIDatePicker).Date;
				var dateTime = DateTime.SpecifyKind(selectedDate, DateTimeKind.Unspecified);
				lblHour.Text = dateTime.Hour.ToString();
				lblMinute.Text = dateTime.Minute.ToString();
				lblAMPM.Text = dateTime.ToString("tt");
			};

			actionSheetTimePicker.DoneButton.TouchDown += (s, e) => {
				var dateTime = DateTime.SpecifyKind(actionSheetTimePicker.DatePicker.Date, DateTimeKind.Unspecified);
				lblHour.Text = dateTime.ToString("hh");
				lblMinute.Text = dateTime.Minute.ToString();
				lblAMPM.Text = dateTime.ToString("tt");
			};

			this.SetupPickers();

		}

		public override void TouchesBegan (MonoTouch.Foundation.NSSet touches, UIEvent evt)
		{
			base.TouchesBegan (touches, evt);
			this.View.EndEditing (true);
		}

		private void SetupPickers()
		{
			// Setup the picker and model // FROM
			PickerModel model = new PickerModel(this.fromMoney);
			model.PickerChanged += (sender, e) => {
				this.selectedFromMoney = e.SelectedValue;
			};

			// Setup the picker and model // TO
			PickerModel modelToValue = new PickerModel(this.toMoney);
			modelToValue.PickerChanged += (sender, e) => {
				this.selectedToMoney = e.SelectedValue;
			};

			UIPickerView picker = new UIPickerView();
			picker.ShowSelectionIndicator = true;
			picker.Model = model;

			UIPickerView pickerToValue = new UIPickerView();
			pickerToValue.ShowSelectionIndicator = true;
			pickerToValue.Model = modelToValue;

			// Setup the toolbar
			UIToolbar toolbar = new UIToolbar();
			toolbar.BarStyle = UIBarStyle.Black;
			toolbar.Translucent = true;
			toolbar.SizeToFit();


			// Setup the toolbar
			UIToolbar toolbarToValue = new UIToolbar();
			toolbarToValue.BarStyle = UIBarStyle.Black;
			toolbarToValue.Translucent = true;
			toolbarToValue.SizeToFit();

			// Create a 'done' button for the toolbar and add it to the toolbar
			UIBarButtonItem doneButton = new UIBarButtonItem("Cerrar", UIBarButtonItemStyle.Done,
				(s, e) => {
					this.txtFromValue.Text = selectedFromMoney;
					this.txtFromValue.ResignFirstResponder();
				});
			toolbar.SetItems(new UIBarButtonItem[]{doneButton}, true);

			UIBarButtonItem doneButtonToValue = new UIBarButtonItem("Cerrar", UIBarButtonItemStyle.Done,
				(s, e) => {
					this.txtToValue.Text = this.selectedToMoney;
					this.txtToValue.ResignFirstResponder();
				});
			toolbarToValue.SetItems(new UIBarButtonItem[]{doneButtonToValue}, true);

			// Tell the textbox to use the picker for input
			this.txtFromValue.InputView = picker;
			this.txtToValue.InputView = pickerToValue;

			// Display the toolbar over the pickers
			this.txtFromValue.InputAccessoryView = toolbar;
			this.txtToValue.InputAccessoryView = toolbarToValue;
		}
	}
}
