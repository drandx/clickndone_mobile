// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using ClickNDone.Core;
using PDRatingSample;

namespace ClickNDone.iOS
{
	public partial class SupplierRateFinishedServiceController : MyViewController
	{
		readonly OrdersModel ordersModel = (OrdersModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(OrdersModel));
		readonly UserModel userModel = (UserModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(UserModel));

		PDRatingView ratingView;
		double rate = 0f;

		public SupplierRateFinishedServiceController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.NavigationItem.SetHidesBackButton (true, false);


			//Rating control
			var ratingConfig = new RatingConfig(emptyImage: UIImage.FromBundle("Stars/empty"),
				filledImage: UIImage.FromBundle("Stars/filled"),
				chosenImage: UIImage.FromBundle("Stars/chosen"));
			// [Optional] Put a little space between the rating items.
			ratingConfig.ItemPadding = 5f;
			PointF starsPosition = new PointF ();
			starsPosition.X = this.txtRanking.Frame.Location.X;
			starsPosition.Y = this.txtRanking.Frame.Location.Y - 50f;
			var ratingFrame = new RectangleF(starsPosition, new SizeF(txtRanking.Frame.Width * 1.5f, 125f));;

			ratingView = new PDRatingView(ratingFrame, ratingConfig);

			// [Optional] Set the current rating to display.
			//decimal rating = 3.58m;
			//decimal halfRoundedRating = Math.Round(rating * 2m, MidpointRounding.AwayFromZero) / 2m;
			//decimal wholeRoundedRating = Math.Round(rating, MidpointRounding.AwayFromZero);
			//ratingView.AverageRating = rating;
			ratingView.ChosenRating = 1;

			// [Optional] Make it read-only to keep the user from setting a rating.
			//StarRating.UserInteractionEnabled = false;

			// [Optional] Attach to the rating event to do something with the chosen value.
			ratingView.RatingChosen += (sender, e) => {
				//(new UIAlertView("Rated!", e.Rating.ToString() + " Stars", null, "Ok")).Show();
				rate = Convert.ToDouble(e.Rating);
			};
			View.Add(ratingView);
			//Rating control ends here



			txtDate.Text = ordersModel.RequestedOrder.GetReservationDate();
			txtState.Text = ordersModel.RequestedOrder.Status.ToString ();
			txtClickCode.Text = ordersModel.RequestedOrder.ClickCode;
			txtEndTime.Text = ordersModel.EndTime.ToString("HH:mm:ss");
			txtStartTime.Text = ordersModel.InitTime.ToString("HH:mm:ss");

			btnRate.TouchUpInside += async (sender, e) => 
			{
				await ordersModel.RateUser(userModel.User.id,this.txtComments.Text,rate,ordersModel.RequestedOrder.Id,userModel.User.userType);
				PerformSegue("OnRateSupplier", this);
			};

		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(false);
			ordersModel.IsBusyChanged += OnIsBusyChanged;
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(false);
			ordersModel.IsBusyChanged -= OnIsBusyChanged;
		}

		void OnIsBusyChanged(object sender, EventArgs e)
		{
			txtComments.Enabled = 
				txtRanking.Enabled =
					indicator.Hidden = !ordersModel.IsBusy;
		}
	}
}
