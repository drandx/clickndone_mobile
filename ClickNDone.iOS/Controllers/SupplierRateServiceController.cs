// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using ClickNDone.Core;

namespace ClickNDone.iOS
{
	public partial class SupplierRateServiceController : MyViewController
	{
		readonly OrdersModel ordersModel = (OrdersModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(OrdersModel));


		public SupplierRateServiceController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.AddKeyboarListeners ();
			this.NavigationItem.SetHidesBackButton (true, false);

			try {

				txtUserName.Text = ordersModel.RequestedOrder.User.names;
				txtUserLastName.Text = ordersModel.RequestedOrder.User.surnames;

			} catch (Exception exc) {
				Console.WriteLine("Error relacionado con ordersModel.RequestedOrder " + exc.Message);
			}

			btnSubmitCancel.TouchUpInside += async(sender, e) =>
			{
				try {
					await ordersModel.ChangeRequestedOrderStateAsync(ServiceState.RECHAZADO_PROVEEDOR,txtReason.Text + " - " + txtDetails.Text);
					PerformSegue("OnCanceledService", this);
				}
				catch (Exception exc)
				{
					Console.WriteLine (exc.Message);
				}
			};

		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(false);
			ordersModel.IsBusyChanged += OnIsBusyChanged;
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(false);
			ordersModel.IsBusyChanged -= OnIsBusyChanged;
		}

		void OnIsBusyChanged(object sender, EventArgs e)
		{
			txtReason.Enabled =
				txtDetails.Enabled = 
					indicator.Hidden = !ordersModel.IsBusy;
		}

	}
}
