// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using ClickNDone.Core;

namespace ClickNDone.iOS
{
	public partial class ProfileController : MyViewController
	{
		readonly UserModel UserModel = (UserModel)DependencyInjectionWrapper.Instance.ServiceContainer ().GetService (typeof(UserModel));

		public ProfileController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.AddKeyboarListeners ();
			this.LoadLeftbarButton ();
			var user = UserModel.User;
			this.txtEmail.Text = user.email;
			this.txtName.Text = user.names;
			this.txtPassword.Text = user.password;
			this.txtPhoneNumber.Text = user.mobile;
			this.txtLastName.Text = user.surnames;

			btnUpdate.TouchUpInside += async(sender, e) => {
				try {
					await UserModel.ChangePassword (UserModel.User.id, UserModel.UserType, UserModel.Password, txtPassword.Text);
					new UIAlertView ("Felicitaciones!", "Se ha actualizado su password con exito", null, "Aceptar").Show ();
				} catch (Exception exc) {
					Console.WriteLine (exc.Message);
				}
			};

		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(false);
			UserModel.IsBusyChanged += OnIsBusyChanged;
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(false);
			UserModel.IsBusyChanged -= OnIsBusyChanged;
		}


		void OnIsBusyChanged(object sender, EventArgs e)
		{
			txtPassword.Enabled = 
				indicator.Hidden = !UserModel.IsBusy;
		}


	}
}
